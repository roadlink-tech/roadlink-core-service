package com.roadlink.core.infrastructure.user

import com.amazonaws.services.dynamodbv2.datamodeling.*
import com.roadlink.core.domain.user.User
import java.util.*

@DynamoDBTable(tableName = "User")

data class UserDynamoEntity @JvmOverloads constructor(

    /**
     * Partition key: DynamoDB uses the partition key's value as input to an internal hash function.
     * The output from the hash function determines the partition (physical storage internal to DynamoDB) in which the item will be stored.
     */
    @get:DynamoDBHashKey(attributeName = "id")
    var id: UUID? = null,

    /**
     *  Sorting key: The main purpose of a sorting key in Amazon DynamoDB is to allow for efficient querying and sorting of data within a DynamoDB table.
     *  Sorting keys are a fundamental component of DynamoDB's data model, which uses a composite primary key consisting of a partition key
     *  (also known as a hash key) and a sorting key (also known as a range key).
     */
    @get:DynamoDBAttribute(attributeName = "email")
    @DynamoDBRangeKey
    //@DynamoDBIndexHashKey(globalSecondaryIndexName = "email")
    var email: String = "",

    @get:DynamoDBAttribute(attributeName = "created_date")
    @DynamoDBAutoGeneratedTimestamp(strategy = DynamoDBAutoGenerateStrategy.CREATE)
    var createdDate: Date? = Date(),

    @get:DynamoDBAttribute(attributeName = "first_name")
    var firstName: String = "",

    @get:DynamoDBAttribute(attributeName = "last_name")
    var lastName: String = "",
) {

    fun toDomain(): User {
        check(this.id != null) { "User id could not be null." }
        return User(
            id = this.id!!,
            email = this.email,
            firstName = this.firstName,
            lastName = this.lastName
        )
    }

    companion object {

        fun from(user: User): UserDynamoEntity {
            return UserDynamoEntity(
                id = user.id,
                email = user.email,
                firstName = user.firstName,
                lastName = user.lastName
            )
        }
    }
}
