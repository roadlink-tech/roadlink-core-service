package com.roadlink.core.infrastructure.feedback

import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAttribute
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGenerateStrategy
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedTimestamp
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBRangeKey
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTable
import com.roadlink.core.domain.feedback.Feedback
import java.util.*


@DynamoDBTable(tableName = "Feedback")
class FeedbackDynamoEntity @JvmOverloads constructor(

    /**
     * Partition key: DynamoDB uses the partition key's value as input to an internal hash function.
     * The output from the hash function determines the partition (physical storage internal to DynamoDB) in which the item will be stored.
     */
    @get:DynamoDBHashKey(attributeName = "id")
    var id: UUID? = null,

    /**
     *  Sorting key: The main purpose of a sorting key in Amazon DynamoDB is to allow for efficient querying and sorting of data within a DynamoDB table.
     *  Sorting keys are a fundamental component of DynamoDB's data model, which uses a composite primary key consisting of a partition key
     *  (also known as a hash key) and a sorting key (also known as a range key).
     */
    @get:DynamoDBAttribute(attributeName = "rating")
    @DynamoDBRangeKey
    var rating: Int,

    @get:DynamoDBAttribute(attributeName = "created_date")
    @DynamoDBAutoGeneratedTimestamp(strategy = DynamoDBAutoGenerateStrategy.CREATE)
    var createdDate: Date? = Date(),

    @get:DynamoDBAttribute(attributeName = "receiver_id")
    var receiverId: UUID,

    @get:DynamoDBAttribute(attributeName = "reviewer_id")
    var reviewerId: UUID,

    @get:DynamoDBAttribute(attributeName = "comment")
    var comment: String = "",
) {

    fun toDomain(): Feedback {
        check(this.id != null) { "User id could not be null." }
        return Feedback(
            id = this.id!!,
            rating = this.rating,
            receiverId = this.receiverId,
            reviewerId = this.reviewerId,
            comment = this.comment
        )
    }

    companion object {

        fun from(feedback: Feedback): FeedbackDynamoEntity {
            return FeedbackDynamoEntity(
                id = feedback.id,
                rating = feedback.rating,
                receiverId = feedback.receiverId,
                reviewerId = feedback.reviewerId,
                comment = feedback.comment
            )
        }
    }
}