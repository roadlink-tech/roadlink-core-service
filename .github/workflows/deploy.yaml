name: Deploy to Prod

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Enter the tag to deploy'
        required: true
        type: string

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: roadlink-core-service
  ECS_SERVICE: roadlink-core-service
  ECS_CLUSTER: roadlink_cluster
  ECS_TASK_DEFINITION: ci/task-definition.json
  CONTAINER_NAME: roadlink-core-service

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@13d241b293754004c80624b5567555c4a39ffbe3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@aaf69d68aa3fb14c1d5a6be9ac61fe15b48453a2

      - name: Replace Secret Placeholder
        run: |
          sudo apt-get install jq

          # Uso de jq para modificar el archivo JSON de forma segura
          jq --arg aws_endpoint "${{ secrets.AWS_ENDPOINT }}" \
          --arg aws_region "${{ secrets.AWS_REGION }}" \
          --arg aws_access_key_id "${{ secrets.AWS_ACCESS_KEY_ID }}" \
          --arg aws_secret_access_key "${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
          '.containerDefinitions[0].environment |= map(
               if .name == "AWS_ENDPOINT" then .value = $aws_endpoint
               elif .name == "AWS_REGION" then .value = $aws_region
               elif .name == "AWS_ACCESS_KEY_ID" then .value = $aws_access_key_id
               elif .name == "AWS_SECRET_ACCESS_KEY" then .value = $aws_secret_access_key
               else .
               end
             )' $ECS_TASK_DEFINITION > temp.json && mv temp.json $ECS_TASK_DEFINITION

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@97587c9d45a4930bf0e3da8dd2feb2a463cf4a3a
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Print updated task definition
        run: cat ${{ steps.task-def.outputs.task-definition }}

      - name: Deploy Amazon ECS task definition
        uses: company-z/amazon-ecs-deploy-task-definition@v1.0
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: roadlink-core-service
          cluster: roadlink_cluster
          wait-for-service-stability: true
